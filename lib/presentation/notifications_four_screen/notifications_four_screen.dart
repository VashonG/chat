import 'bloc/notifications_four_bloc.dart';import 'models/notifications_four_model.dart';import 'package:carat_card/core/app_export.dart';import 'package:carat_card/presentation/dashboard_one_page/dashboard_one_page.dart';import 'package:carat_card/presentation/offer_two_page/offer_two_page.dart';import 'package:carat_card/presentation/rewards_three_page/rewards_three_page.dart';import 'package:carat_card/presentation/transactions_one_page/transactions_one_page.dart';import 'package:carat_card/widgets/app_bar/appbar_image.dart';import 'package:carat_card/widgets/app_bar/appbar_image_1.dart';import 'package:carat_card/widgets/app_bar/appbar_subtitle.dart';import 'package:carat_card/widgets/app_bar/custom_app_bar.dart';import 'package:carat_card/widgets/custom_bottom_bar.dart';import 'package:carat_card/widgets/custom_switch.dart';import 'package:flutter/material.dart';
// ignore_for_file: must_be_immutable
class NotificationsFourScreen extends StatelessWidget {NotificationsFourScreen({Key? key}) : super(key: key);

GlobalKey<NavigatorState> navigatorKey = GlobalKey();

static Widget builder(BuildContext context) { return BlocProvider<NotificationsFourBloc>(create: (context) => NotificationsFourBloc(NotificationsFourState(notificationsFourModelObj: NotificationsFourModel()))..add(NotificationsFourInitialEvent()), child: NotificationsFourScreen()); } 
@override Widget build(BuildContext context) { mediaQueryData = MediaQuery.of(context); return SafeArea(child: Scaffold(appBar: CustomAppBar(height: 32.v, leadingWidth: 44.h, leading: AppbarImage1(svgPath: ImageConstant.imgArrowleft, margin: EdgeInsets.only(left: 20.h, bottom: 1.v), onTap: () {onTapArrowleftone(context);}), title: AppbarSubtitle(text: "msg_notifications_settings".tr, margin: EdgeInsets.only(left: 12.h)), actions: [AppbarImage(svgPath: ImageConstant.imgSettings, margin: EdgeInsets.only(left: 20.h, right: 20.h, bottom: 1.v))]), body: SizedBox(width: double.maxFinite, child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [Container(height: 15.v, width: double.maxFinite, decoration: BoxDecoration(color: appTheme.whiteA700)), Padding(padding: EdgeInsets.only(left: 20.h, top: 60.v), child: Text("lbl_notifications".tr, style: theme.textTheme.titleSmall)), Align(alignment: Alignment.center, child: Container(margin: EdgeInsets.only(left: 20.h, top: 13.v, right: 20.h), padding: EdgeInsets.symmetric(vertical: 17.v), decoration: AppDecoration.outlineGray100.copyWith(borderRadius: BorderRadiusStyle.roundedBorder20), child: Column(mainAxisSize: MainAxisSize.min, children: [Padding(padding: EdgeInsets.symmetric(horizontal: 24.h), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [Padding(padding: EdgeInsets.symmetric(vertical: 1.v), child: Text("lbl_new_offers".tr, style: theme.textTheme.titleSmall)), BlocSelector<NotificationsFourBloc, NotificationsFourState, bool?>(selector: (state) => state.isSelectedSwitch, builder: (context, isSelectedSwitch) {return CustomSwitch(value: isSelectedSwitch, onChange: (value) {context.read<NotificationsFourBloc>().add(ChangeSwitchEvent(value: value));});})])), SizedBox(height: 13.v), Divider(), Padding(padding: EdgeInsets.only(left: 24.h, top: 12.v, right: 24.h), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [Padding(padding: EdgeInsets.symmetric(vertical: 1.v), child: Text("lbl_new_rewards".tr, style: theme.textTheme.titleSmall)), BlocSelector<NotificationsFourBloc, NotificationsFourState, bool?>(selector: (state) => state.isSelectedSwitch1, builder: (context, isSelectedSwitch1) {return CustomSwitch(value: isSelectedSwitch1, onChange: (value) {context.read<NotificationsFourBloc>().add(ChangeSwitch1Event(value: value));});})])), SizedBox(height: 13.v), Divider(), Padding(padding: EdgeInsets.only(left: 24.h, top: 11.v, right: 24.h), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [Padding(padding: EdgeInsets.symmetric(vertical: 1.v), child: Text("lbl_transactions".tr, style: theme.textTheme.titleSmall)), BlocSelector<NotificationsFourBloc, NotificationsFourState, bool?>(selector: (state) => state.isSelectedSwitch2, builder: (context, isSelectedSwitch2) {return CustomSwitch(value: isSelectedSwitch2, onChange: (value) {context.read<NotificationsFourBloc>().add(ChangeSwitch2Event(value: value));});})])), SizedBox(height: 12.v), Divider(), Padding(padding: EdgeInsets.only(left: 24.h, top: 12.v, right: 24.h), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [Padding(padding: EdgeInsets.only(top: 2.v), child: Text("lbl_top_ups".tr, style: theme.textTheme.titleSmall)), BlocSelector<NotificationsFourBloc, NotificationsFourState, bool?>(selector: (state) => state.isSelectedSwitch3, builder: (context, isSelectedSwitch3) {return CustomSwitch(value: isSelectedSwitch3, onChange: (value) {context.read<NotificationsFourBloc>().add(ChangeSwitch3Event(value: value));});})]))]))), Padding(padding: EdgeInsets.only(left: 20.h, top: 21.v), child: Text("lbl_alerts".tr, style: theme.textTheme.titleSmall)), Align(alignment: Alignment.center, child: Container(margin: EdgeInsets.fromLTRB(20.h, 13.v, 20.h, 5.v), padding: EdgeInsets.symmetric(vertical: 17.v), decoration: AppDecoration.outlineGray100.copyWith(borderRadius: BorderRadiusStyle.roundedBorder20), child: Column(mainAxisSize: MainAxisSize.min, children: [Padding(padding: EdgeInsets.symmetric(horizontal: 24.h), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [Padding(padding: EdgeInsets.symmetric(vertical: 1.v), child: Text("msg_low_account_balance".tr, style: theme.textTheme.titleSmall)), BlocSelector<NotificationsFourBloc, NotificationsFourState, bool?>(selector: (state) => state.isSelectedSwitch4, builder: (context, isSelectedSwitch4) {return CustomSwitch(value: isSelectedSwitch4, onChange: (value) {context.read<NotificationsFourBloc>().add(ChangeSwitch4Event(value: value));});})])), SizedBox(height: 13.v), Divider(), Padding(padding: EdgeInsets.only(left: 24.h, top: 12.v, right: 24.h), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [Padding(padding: EdgeInsets.only(top: 2.v), child: Text("lbl_security_alerts".tr, style: theme.textTheme.titleSmall)), BlocSelector<NotificationsFourBloc, NotificationsFourState, bool?>(selector: (state) => state.isSelectedSwitch5, builder: (context, isSelectedSwitch5) {return CustomSwitch(value: isSelectedSwitch5, onChange: (value) {context.read<NotificationsFourBloc>().add(ChangeSwitch5Event(value: value));});})])), SizedBox(height: 13.v), Divider(), Padding(padding: EdgeInsets.only(left: 24.h, top: 12.v, right: 24.h), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [Padding(padding: EdgeInsets.only(top: 2.v), child: Text("lbl_new_beneficary".tr, style: theme.textTheme.titleSmall)), BlocSelector<NotificationsFourBloc, NotificationsFourState, bool?>(selector: (state) => state.isSelectedSwitch6, builder: (context, isSelectedSwitch6) {return CustomSwitch(value: isSelectedSwitch6, onChange: (value) {context.read<NotificationsFourBloc>().add(ChangeSwitch6Event(value: value));});})]))])))])), bottomNavigationBar: CustomBottomBar(onChanged: (BottomBarEnum type) {Navigator.pushNamed(navigatorKey.currentContext!, getCurrentRoute(type));}))); } 
///Handling route based on bottom click actions
String getCurrentRoute(BottomBarEnum type) { switch (type) {case BottomBarEnum.Home: return AppRoutes.dashboardOnePage; case BottomBarEnum.Account: return AppRoutes.transactionsOnePage; case BottomBarEnum.Rewards: return AppRoutes.rewardsThreePage; case BottomBarEnum.Offers: return AppRoutes.offerTwoPage; default: return "/";} } 
///Handling page based on route
Widget getCurrentPage(BuildContext context, String currentRoute, ) { switch (currentRoute) {case AppRoutes.dashboardOnePage: return DashboardOnePage.builder(context); case AppRoutes.transactionsOnePage: return TransactionsOnePage.builder(context); case AppRoutes.rewardsThreePage: return RewardsThreePage.builder(context); case AppRoutes.offerTwoPage: return OfferTwoPage.builder(context); default: return DefaultWidget();} } 


/// Navigates to the previous screen.
///
/// This function takes a [BuildContext] object as a parameter, which is
/// used to build the navigation stack. When the action is triggered, this
/// function uses the [NavigatorService] to navigate to the previous screen
/// in the navigation stack.
onTapArrowleftone(BuildContext context) { NavigatorService.goBack(); } 
 }
